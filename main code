import customtkinter
import tkinter


def dark():
    if combobox.state == "normal":
        customtkinter.set_appearance_mode("dark")


def light():
    if combobox.state == "normal":
        customtkinter.set_appearance_mode('light')


from imports import *

if len(sys.argv) > 1 and sys.argv[1] == "-cli":
    print("Starting command line chat")
    isCLI = True
else:
    isCLI = False

# GLOBALS
commands = ["nick", "connect", "disconnect", "host"]
conn_array = []  # stores open sockets
secret_array = dict()  # key: the open sockets in conn_array,
# value: integers for encryption
username_array = dict()  # key: the open sockets in conn_array,
# value: usernames for the connection
contact_array = dict()  # key: ip address as a string, value: [port, username]

username = "Self"

location = 0
port = 0
top = ""

is_hinted = False

main_body_text = 0


# -GLOBALS-

# So,
#  x_encode your message with the key, then pass that to
#  refract to get a string out of it.
# To decrypt, pass the message back to x_encode, and then back to refract

def binWord(word):
    """STRING->BINARY."""
    master = ""
    for letter in word:
        temp = bin(ord(letter))[2:]
        while len(temp) < 7:
            temp = '0' + temp
        master = master + temp
    return master


def xcrypt(message, key):
    """Encrypts binary message"""
    count = 0
    master = ""
    for letter in message:
        if count == len(key):
            count = 0
        master += str(int(letter) ^ int(key[count]))
        count += 1
    return master


def x_encode(string, number):
    """Encrypts the string by the number."""
    return xcrypt(binWord(string), bin(number)[2:])


def refract(binary):
    """Returns the string representation of the binary."""
    master = ""
    for x in range(0, int(len(binary) / 7)):
        master += chr(int(binary[x * 7: (x + 1) * 7], 2) + 0)
    return master


def formatNumber(number):
    """Ensures that number is at least length 4 by
    adding extra 0s to the front."""
    temp = str(number)
    while len(temp) < 4:
        temp = '0' + temp
    return temp


def netThrow(conn, secret, message):
    """Sends message through the open socket conn with the encryption key
    secret. Sends the length of the incoming message, then sends the actual
    message."""
    try:
        conn.send(formatNumber(len(x_encode(message, secret))).encode())
        conn.send(x_encode(message, secret).encode())
    except socket.error:
        if len(conn_array) != 0:
            writeToScreen(
                "Connection issue. Sending message failed.", "System")
            processFlag("-001")


def netCatch(conn, secret):
    """Receive and return the message through open socket conn, decrypting
    using key secret. If the message length begins with - instead of a number,
    process as a flag and return 1."""
    try:
        data = conn.recv(4)
        if data.decode()[0] == '-':
            processFlag(data.decode(), conn)
            return 1
        data = conn.recv(int(data.decode()))
        return refract(xcrypt(data.decode(), bin(secret)[2:]))
    except socket.error:
        if len(conn_array) != 0:
            writeToScreen(
                "Connection issue. Receiving message failed.", "System")
        processFlag("-001")


def isPrime(number):
    """Checks to see if a number is prime."""
    x = 1
    if number == 2 or number == 3:
        return True
    while x < math.sqrt(number):
        x += 1
        if number % x == 0:
            return False
    return True


def processFlag(number, conn=None):
    """Process the flag corresponding to number, using open socket conn
    if necessary.

    """
    global statusConnect
    global conn_array
    global secret_array
    global username_array
    global contact_array
    global isCLI
    t = int(number[1:])
    if t == 1:  # when there is disconnection
        # or in the event of single connection being left
        # or if we're just a client
        if len(conn_array) == 1:
            writeToScreen("Connection closed.", "System")
            dump = secret_array.pop(conn_array[0])
            dump = conn_array.pop()
            try:
                dump.close()
            except socket.error:
                print("Issue with someone being bad about disconnecting")
            if not isCLI:
                statusConnect.set("Connect")
                connecter.config(state=NORMAL)
            return

        if conn != None:
            writeToScreen("Connection to " + conn.getsockname()
            [0] + " closed.", "System")
            dump = secret_array.pop(conn)
            conn_array.remove(conn)
            conn.close()

    if t == 2:  # when username is changed
        name = netCatch(conn, secret_array[conn])
        if (isUsernameFree(name)):
            writeToScreen(
                "User " + username_array[conn] + " has changed their username to " + name, "System")
            username_array[conn] = name
            contact_array[
                conn.getpeername()[0]] = [conn.getpeername()[1], name]

    if t == 4:  # passing a friend who this should connect to (running on the same port as the other session)
        data = conn.recv(4)
        data = conn.recv(int(data.decode()))
        Client(data.decode(),
               int(contact_array[conn.getpeername()[0]][0])).start()


def usercommands(command, param):
    """For commands passed in via the / text input."""
    global conn_array
    global secret_array
    global username

    if command == "nick":  # change nickname
        for letter in param[0]:
            if letter == " " or letter == "\n":
                if isCLI:
                    error_window(0, "Invalid username. No spaces allowed.")
                else:
                    error_window(root, "Invalid username. Spaces are not allowed.")
                return
        if isUsernameFree(param[0]):
            writeToScreen("Username is being changed to " + param[0], "System")
            for conn in conn_array:
                conn.send("-002".encode())
                netThrow(conn, secret_array[conn], param[0])
            username = param[0]
        else:
            writeToScreen(param[0] +
                          " is already taken as a username", "System")
    if command == "disconnect":  # disconnects from current connection
        for conn in conn_array:
            conn.send("-001".encode())
        processFlag("-001")
    if command == "connect":  # connects to passed in host port
        if (options_sanitation(param[1], param[0])):
            Client(param[0], int(param[1])).start()
    if command == "host":  # starts server on passed in port
        if (options_sanitation(param[0])):
            Server(int(param[0])).start()


def connectfriend(conn):
    """Sends conn all of the people currently in conn_array so they can connect
    to them.

    """
    global conn_array
    for connection in conn_array:
        if conn != connection:
            conn.send("-004".encode())
            conn.send(
                formatNumber(len(connection.getpeername()[0])).encode())  # pass the ip address
            conn.send(connection.getpeername()[0].encode())
            conn.send(formatNumber(len(connection.getpeername()[1])).encode())  # pass the port number
            conn.send(connection.getpeername()[1].encode())


# errors
def error_window(master, texty):
    """Launches a new window to display the message texty."""
    global isCLI
    if isCLI:
        writeToScreen(texty, "System")
    else:
        window = customtkinter.CTkToplevel(master)
        window.geometry("400x200")
        window.title("ERROR")
        window.grab_set()
        Label(window, text=texty).pack()
        go = customtkinter.CTkButton(master=window, text="OK", corner_radius=10, command=window.destroy)
        go.pack()
        go.focus_set()


def optionDelete(window):
    connecter.config(state=NORMAL)
    window.destroy()


# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------

# places the text from the text bar on to the screen and sends it to everyone this program is connected to
def placeText(text):
    """Places the text from the text bar on to the screen and sends it to
    everyone this program is connected to."""
    global conn_array
    global secret_array
    global username
    writeToScreen(text, username)
    for person in conn_array:
        netThrow(person, secret_array[person], text)


def writeToScreen(text, username=""):
    """Places text to main text body in format "username: text"."""
    global main_body_text
    global isCLI
    if isCLI:
        if username:
            print(username + ": " + text)
        else:
            print(text)
    else:
        main_body_text.config(state=NORMAL)
        main_body_text.insert(END, '\n')
        if username:
            main_body_text.insert(END, username + ": ")
        main_body_text.insert(END, text)
        main_body_text.yview(END)
        main_body_text.config(state=DISABLED)


def processUserText(event):
    """Takes text from text bar input and calls processUserCommands if it
    begins with '/'.

    """
    data = text_input.get()
    if data[0] != "/":  # is not a command
        placeText(data)
    else:
        if data.find(" ") == -1:
            command = data[1:]
        else:
            command = data[1:data.find(" ")]
        params = data[data.find(" ") + 1:].split(" ")
        usercommands(command, params)
    text_input.delete(0, END)


def processUserTextHighlight(event):
    """Takes text from text bar input and highlights entry if it
    begins with '/'.

    """
    global is_hinted
    data = text_input.get()
    if len(data) > 0:
        if data[0] != "/":  # is not a command
            text_input.config(background="#ffffff")
        else:
            text_input.config(background="#ffdfcf")
    else:  # there is no any text
        text_input.config(background="#ffffff")
    if len(data) == 1 and not is_hinted:
        if data[0] == "/":  # is not a command
            showCommandHint()
            is_hinted = True
    if len(data) == 0:
        is_hinted = False


def showCommandHint():
    """When this function invoked a popup will have shown to user
    that contains list of commands

    """
    try:
        popup.tk_popup(text_input.winfo_rootx(), text_input.winfo_rooty())
    finally:
        popup.grab_release()


def complete(index, array):
    text_input.insert(1, array[index])


def processUserInput(text):
    """ClI version of processUserText."""
    if text[0] != "/":
        placeText(text)
    else:
        if text.find(" ") == -1:
            command = text[1:]
        else:
            command = text[1:text.find(" ")]
        params = text[text.find(" ") + 1:].split(" ")
        usercommands(command, params)


# -------------------------------------------------------------------------
# code for creating a random socket for connection
class Server(threading.Thread):
    "A class for a Server instance."""

    def __init__(self, port):
        threading.Thread.__init__(self)
        self.port = port

    def run(self):
        global conn_array
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind(('', self.port))

        if len(conn_array) == 0:
            writeToScreen(
                "Socket is good, waiting for connections on port: " +
                str(self.port), "System")
        s.listen(1)
        global conn_init
        conn_init, addr_init = s.accept()
        serv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        serv.bind(('', 0))  # get a random empty port
        serv.listen(1)

        portVal = str(serv.getsockname()[1])
        if len(portVal) == 5:
            conn_init.send(portVal.encode())
        else:
            conn_init.send(("0" + portVal).encode())

        conn_init.close()
        conn, addr = serv.accept()
        conn_array.append(conn)  # add an array entry for this connection
        writeToScreen("Connected by " + str(addr[0]), "System")

        global statusConnect
        statusConnect.set("Disconnect")
        connecter.config(state=NORMAL)

        # create the numbers for my encryption
        prime = random.randint(1000, 9000)
        while not isPrime(prime):
            prime = random.randint(1000, 9000)
        base = random.randint(20, 100)
        a = random.randint(20, 100)

        # send the numbers (base, prime, A)
        conn.send(formatNumber(len(str(base))).encode())
        conn.send(str(base).encode())

        conn.send(formatNumber(len(str(prime))).encode())
        conn.send(str(prime).encode())

        conn.send(formatNumber(len(str(pow(base, a) % prime))).encode())
        conn.send(str(pow(base, a) % prime).encode())

        # get B
        data = conn.recv(4)
        data = conn.recv(int(data.decode()))
        b = int(data.decode())

        # calculate the encryption key
        global secret_array
        secret = pow(b, a) % prime
        # store the encryption key by the connection
        secret_array[conn] = secret

        conn.send(formatNumber(len(username)).encode())
        conn.send(username.encode())

        data = conn.recv(4)
        data = conn.recv(int(data.decode()))
        if data.decode() != "Self":
            username_array[conn] = data.decode()
            contact_array[str(addr[0])] = [str(self.port), data.decode()]
        else:
            username_array[conn] = addr[0]
            contact_array[str(addr[0])] = [str(self.port), "No_nick"]

        connectfriend(conn)
        threading.Thread(target=Runner, args=(conn, secret)).start()
        Server(self.port).start()


class Client(threading.Thread):
    """A class for a Client instance."""

    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.port = port
        self.host = host

    def run(self):
        global conn_array
        global secret_array
        conn_init = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        conn_init.settimeout(5.0)
        try:
            conn_init.connect((self.host, self.port))
        except socket.timeout:
            writeToScreen("Timeout issue. Host possible not there.", "System")
            connecter.config(state=NORMAL)
            raise SystemExit(0)
        except socket.error:
            writeToScreen(
                "Connection issue. Host actively refused connection.", "System")
            connecter.config(state=NORMAL)
            raise SystemExit(0)
        porta = conn_init.recv(5)
        porte = int(porta.decode())
        conn_init.close()
        conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        conn.connect((self.host, porte))

        writeToScreen("Connected to: " + self.host +
                      " on port: " + str(porte), "System")

        global statusConnect
        statusConnect.set("Disconnect")
        connecter.config(state=NORMAL)

        conn_array.append(conn)
        # get my base, prime, and A values
        data = conn.recv(4)
        data = conn.recv(int(data.decode()))
        base = int(data.decode())
        data = conn.recv(4)
        data = conn.recv(int(data.decode()))
        prime = int(data.decode())
        data = conn.recv(4)
        data = conn.recv(int(data.decode()))
        a = int(data.decode())
        b = random.randint(20, 100)
        # send the B value
        conn.send(formatNumber(len(str(pow(base, b) % prime))).encode())
        conn.send(str(pow(base, b) % prime).encode())
        secret = pow(a, b) % prime
        secret_array[conn] = secret

        conn.send(formatNumber(len(username)).encode())
        conn.send(username.encode())

        data = conn.recv(4)
        data = conn.recv(int(data.decode()))
        if data.decode() != "Self":
            username_array[conn] = data.decode()
            contact_array[
                conn.getpeername()[0]] = [str(self.port), data.decode()]
        else:
            username_array[conn] = self.host
            contact_array[conn.getpeername()[0]] = [str(self.port), "No_nick"]
        threading.Thread(target=Runner, args=(conn, secret)).start()
        # Server(self.port).start()
        # ##########################################################################THIS
        # IS GOOD, BUT I CAN'T TEST ON ONE MACHINE


def Runner(conn, secret):
    global username_array
    while 1:
        data = netCatch(conn, secret)
        if data != 1:
            writeToScreen(data, username_array[conn])


# -------------------------------------------------------------------------
# Menu helpers

def Quickconnect():
    """Menu window for connection options."""
    window = customtkinter.CTkToplevel(root)
    window.geometry("400x200")
    window.title("Connection options")
    window.grab_set()
    customtkinter.CTkLabel(master=window, text="Server IP:").grid(row=0)
    destination = customtkinter.CTkEntry(window)
    destination.grid(row=0, column=1)
    go = customtkinter.CTkButton(master=window, text="Connect", corner_radius=10, command=lambda:
    client_options_go(destination.get(), "9999", window))
    go.grid(row=1, column=1)


def savechat():
    """Saves history with Tkinter's asksaveasfilename dialog."""
    global main_body_text
    '''file_name = saveasfilename(
        title="Choose save location",
        filetypes=[('Plain text', '*.txt'), ('Any File', '*.*')])'''
    try:
        from datetime import datetime
        date_time = str(datetime.now())
        filehandle = open("savechat.txt", "a")
        contents = main_body_text.get(1.0, END)[125:-1]
        filehandle.write(f'\nDate: {date_time[0:10]} Starttime: {date_time[11:19]}\n')
        for line in contents:
            filehandle.write(line)
        filehandle.close()
    except IOError:
        print("Can't save history.")
        return


def revchat():
    """TO RECIEVE CHAT DATA"""
    top = customtkinter.CTkToplevel()
    top.geometry("400x500")
    top.title("Previous Chat")
    top.grab_set()
    main_body = customtkinter.CTkFrame(master=root, height=200, width=50, corner_radius=10)
    main_body.pack(padx=10, pady=30, fill=Y)
    filehandle = open("savechat.txt", "r")
    chats = filehandle.readlines()
    main_body_text = Text(top)
    body_text_scroll = customtkinter.CTkScrollbar(top)
    body_text_scroll.grid(row=0, column=1, sticky="ns")
    main_body_text.focus_set()
    body_text_scroll.pack(side=RIGHT, fill=Y)
    main_body_text.pack(side=LEFT, fill=Y)
    for i in chats:
        main_body_text.insert(END, f'{i}')


# -------------------------------------------------------------------------
# for change_username
def change_username():
    """Launches username options window for setting username."""
    top = customtkinter.CTkToplevel()
    top.geometry("400x200")
    top.title("Username options")
    top.grab_set()
    customtkinter.CTkLabel(master=top, text="Username:").grid(row=0)
    name = customtkinter.CTkEntry(top)
    name.focus_set()
    name.grid(row=0, column=1)
    go = customtkinter.CTkButton(master=top, text="Change", corner_radius=10, command=lambda:
    username_options_go(name.get(), top))
    go.grid(row=1, column=1)


def isUsernameFree(name):
    """Checks to see if the username name is free for use."""
    global username_array
    global username
    for conn in username_array:
        if name == username_array[conn] or name == username:
            return False
    return True


def username_options_go(name, window):
    """Processes the options entered by the user in the
    change_username window

    """
    usercommands("nick", [name])
    window.destroy()


# -------------------------------------------------------------------------
# connect
def connects(clientType):
    global conn_array  # will connect to
    connecter.config(state=DISABLED)
    if len(conn_array) == 0:
        if clientType == 0:
            connect_on_port(root)

    else:
        # connecter.config(state=NORMAL)
        for connection in conn_array:
            connection.send("-001".encode())
        processFlag("-001")


# -------------------------------------------------------------------------
# connect on port

def connect_on_port():
    """Launches connect_on_port window for getting destination hostname and port."""
    top = customtkinter.CTkToplevel()
    top.geometry("400x200")
    top.title("Connection options")
    top.protocol("WM_DELETE_WINDOW", lambda: optionDelete(top))
    top.grab_set()
    customtkinter.CTkLabel(master=top, text="Server IP:").grid(row=0)
    location = customtkinter.CTkEntry(top)
    location.grid(row=0, column=1)
    location.focus_set()
    customtkinter.CTkLabel(master=top, text="Port Adr:").grid(row=1)
    port = customtkinter.CTkEntry(top)
    port.grid(row=1, column=1)
    go = customtkinter.CTkButton(master=top, text="Connect", corner_radius=10, command=lambda:
    client_options_go(location.get(), port.get(), top))
    go.grid(row=2, column=1)


def client_options_go(dest, port, window):
    "Processes the options entered by the user in the connect_on_port window."""
    if options_sanitation(port, dest):
        if not isCLI:
            window.destroy()
        Client(dest, int(port)).start()
    elif isCLI:
        sys.exit(1)


def options_sanitation(por, loc=""):
    """Checks to make sure the port and destination ip are both valid.
    Launches error windows if there are any issues."""
    global root
    if version == 2:
        por = unicode(por)
    if isCLI:
        root = 0
    if not por.isdigit():
        error_window(root, "Please input a port number.")
        return False
    if int(por) < 0 or 65555 < int(por):
        error_window(root, "Please input a port number between 0 and 65555")
        return False
    if loc != "":
        if not ip_process(loc.split(".")):
            error_window(root, "Please input a valid ip address.")
            return False
    return True


def ip_process(ipArray):
    """Checks to make sure every section of the ip is a valid number."""
    if len(ipArray) != 4:
        return False
    for ip in ipArray:
        if version == 2:
            ip = unicode(ip)
        if not ip.isdigit():
            return False
        t = int(ip)
        if t < 0 or 255 < t:
            return False
    return True


def toOne():
    global clientType
    clientType = 0


def toTwo():
    global clientType
    clientType = 1


# -------------------------------------------------------------------------
# gui code

if len(sys.argv) > 1 and sys.argv[1] == "-cli":
    print("Starting command line chat")

else:
    root = customtkinter.CTk()
    root.geometry(f"{800}x{650}")
    root.title("Chat Room")

    menubar = customtkinter.CTkOptionMenu(master=root)
    """logo = Image.open('trident musicals 6.png')
    logo = ImageTk.PhotoImage(logo)
    logo_label = tkinter.Label(image=logo)
    logo_label.iamge = logo
    logo_label.grid(column=1,row=0)"""


    # for savechat
    def optionmenu_callback():
        print("optionmenu dropdown clicked:", choice)


    combobox = customtkinter.CTkButton(master=root, text="Save Chat", corner_radius=10, command=savechat)
    combobox.pack(padx=20, pady=10)
    combobox.place(x=290, y=0)
    '''combobox.set("File")'''  # set initial value
    # for exit
    exit1 = customtkinter.CTkButton(master=root, text="Exit", corner_radius=10, height=29, width=110,
                                    command=root.destroy)
    exit1.pack(padx=20, pady=10)
    exit1.place(x=580, y=0)
    # for getiing old chat
    chat = customtkinter.CTkButton(master=root, text="Prev. Chat", corner_radius=10, height=29, width=110,
                                   command=revchat)
    chat.pack(padx=20, pady=10)
    chat.place(x=695, y=0)
    # for change username
    change_username1 = customtkinter.CTkButton(master=root, text="Change Username", corner_radius=10,
                                               command=change_username)
    change_username1.pack(padx=20, pady=10)
    change_username1.place(x=0, y=0)


    # for connect menu
    def optionmenu_callback1():
        print("optionmenu dropdown clicked:")


    combobox = customtkinter.CTkButton(master=top, text=("Connect On Port"), corner_radius=10, command=connect_on_port)
    combobox.pack(padx=20, pady=10)
    combobox.place(x=145, y=0)
    root.config(menu=menubar)

    combobox = customtkinter.CTkButton(master=top,
                                       text=("Disconnect"), corner_radius=10,
                                       command=lambda: processFlag("-001"))
    combobox.pack(padx=20, pady=10)
    combobox.place(x=435, y=0)

    main_body = customtkinter.CTkFrame(master=root, height=200, width=50, corner_radius=10)
    main_body.pack(padx=10, pady=30, fill=Y)

    main_body_text = Text(main_body)
    body_text_scroll = customtkinter.CTkScrollbar(main_body)
    body_text_scroll.grid(row=0, column=1, sticky="ns")
    main_body_text.focus_set()
    body_text_scroll.pack(side=RIGHT, fill=Y)
    main_body_text.pack(side=LEFT, fill=Y)

    main_body_text.config(yscrollcommand=body_text_scroll.set)
    main_body.pack()
    from datetime import datetime

    date_time = str(datetime.now())

    main_body_text.insert(END,
                          f"Welcome to the chat program! \nDate: {date_time[0:10]} Starttime: {date_time[11:19]} \nType-'/' to \nConnect to a port or \nChange your nickname!")
    main_body_text.config(state=DISABLED)

    text_input = customtkinter.CTkEntry(root, width=500)
    text_input.bind("<Return>", processUserText)
    text_input.bind("<KeyRelease>", processUserTextHighlight)
    text_input.pack()

    # create hint popup
    popup = Menu(master=root, tearoff=0)
    popup.add_command(label=commands[0], command=lambda: complete(0, commands))
    popup.add_command(label=commands[1], command=lambda: complete(1, commands))
    popup.add_command(label=commands[2], command=lambda: complete(2, commands))
    popup.add_command(label=commands[3], command=lambda: complete(3, commands))

    statusConnect = StringVar()
    statusConnect.set("Connect")
    clientType = 1
    Radiobutton(root, text="Client", variable=clientType, value=0, command=toOne).pack(anchor=E)
    Radiobutton(root, text="Server", variable=clientType, value=1, command=toTwo).pack(anchor=E)
    connecter = Button(root, textvariable=statusConnect,
                       command=lambda: connects(clientType))
    connecter.pack()

    combobox = customtkinter.CTkButton(master=root, text="Dark Mode", corner_radius=10, command=dark, state="normal")
    combobox.pack(side=LEFT)
    combobox = customtkinter.CTkButton(master=root, text="Light Mode", corner_radius=10, command=light, state="normal")
    combobox.pack(side=LEFT)

    # ------------------------------------------------------------#

    root.mainloop()
